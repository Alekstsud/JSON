/*В этом задании вам нужно вычислить факториал для числа, передаваемого в нашу функцию и вывести его с помощью команды return. На всякий случай напоминаем, что факториал числа a это произведение всех целых чисел от 1 до a, например, если а = 5, то факториал a будет равен
1 * 2 * 3 * 4 * 5 */
function testFactorial(a) {
    var x;
    x = 1; {
   for ( i = 1; i <= a; i++) {
   x *= i;
   }
   }
    return x;
}

/*В этом задании вам нужно вписать в указанное место код,
 который будет присваивать переменной "х" удвоенное значение
  остатка от деления произведения переменных "a" и "b" на
   их сумму. */
function testOperation(a, b) {
    var x;
    var y = a * b;
    var z = a + b;
    var e = y % z;
    x = 2 * e;
    return x;
}
/*В этом задании вам нужно вписать в указанное место код, который будет присваивать переменной "х" значение суммы переменных "a" и "b" в случае если  a > b или их произведение в остальных случаях.*/
function testIf(a, b) {
    var x;
    x = (a > b) ? a + b : a * b;
    return x;
}
/*В этом задании вам нужно вписать в указанное место код, который будет присваивать переменной "х" значение суммы переменных "a" и "b" - в случае если  a < b, разность "a" и "b" - в случае если  a > b, и их произведение  в остальных случаях.*/
function testIf(a, b) {
    var x;
    if (a < b) {
  x = a + b;
} else if (a > b) { 
  x = a - b; 
} else { 
  x = a * b;
}
    return x;
}

/*В этом задании вам нужно вписать в указанное место код, который будет присваивать переменной "х" название цифры, переданной в переменную "а". Цифра в переменную "а" будет передана случайным образом и может оказаться в диапазоне от 0 до 9 включительно, название должно быть написано по-русски с большой буквы - "Ноль", "Один", "Два" и т.д.*/
function testCase(a) {
    var x;
    switch (a) {
  case 0: x= 'Ноль';
    break
  case 1:    
    x = "Один"; 
    break;
  case 2:
    x = "Два";
    break;
  case 3:
    x = "Три";
    break;
  case 4:    
    x = "Четыре";
  case 5:    
    x = "Пять"; 
    break;
  case 6:
    x = "Шесть";
    break;
  case 7:
    x = "Семь";
    break;
 case 8:    
    x = "Восемь";
            break;
  case 9:    
    x = "Девять"; 
    break;
 default:
        x = "x не равен 0-9";
};
    return x;
}

/*В этом задании вам нужно вычислить сумму всех четных чисел, встречающихся в ряду от 1 до числа (включительно), передаваемого в нашу функцию (переменная "а").*/
function testWhile(a) {
    var x=0;
     var b=1;
    while (b<=a) {
        if (b%2==0)
        {
            x=x+b;
        }
    b=b+1;
    }
    return x;
}

// Ключевое слово break позволяет нам прервать цикл и перейти к коду, следующему после цикла.
// Рассмотрим пример:

// for (i = 1; i < 10; i = i + 1) {
//   if (i == 5) {
//     break;
//   }
//   console.log('i= '+i);
// }

// В данном случае цикл прервется при достижении переменной i значения 5. До этого момента каждую итерацию будет происходить вывод в консоль значения переменной i.

// Ключевое слово continue прерывает текущую итерацию цикла и переходит к следующей.
// В качестве примера рассмотрим такой код:

// for (i = 1; i < 10; i = i + 1) {
//   if (i == 5) {
//     continue;
//   }
//   console.log('i= ' + i);
// }

// В данном случае continue помешает выполниться выводу в консоль при значении переменной равном 5, все остальные значения будут напечатаны.

// Говоря о циклах и выходе из них, необходимо также упомянуть такой инструмент, как метки. Метки в JavaScript действуют только для циклов и оператора Switch, так что сделать из них полноценный переход в любую точку программы не получится. Однако, этого вполне хватает для перемещения в любое место вложенности внутри циклов.

// Например:

// var i, j;

// metka1:
// for (i = 0; i < 5; i = i + 1) {      
//    metka2:
//    for (j = 0; j < 5; j = j + 1) {   
//        if (i == j) {
//            continue metka1;
//         } else {
//           if (i == 3) {
//               break metka2; 
//           }
//           console.log(i, j);
//         }
//     }
// }

// В этом примере в момент, когда значения счетчиков сравняются, произойдет выход из внутреннего цикла и начало следующей итерации внешнего, а при  значении счетчика внешнего цикла, равном значению 3, произойдет прерывание работы внутреннего цикла.
// 10
// 20
// 21
// 40
// 41
// 42
// 43

//Дано натуральное число n. Напишите рекурсивную функцию, которая возвращает строку чисел от 1 до n, разделенных пробелом.
function my_function(n) {
  if (n <= 1) return 1;
  return my_function(n-1) + " " + n;       
}

function my_function(n) {
  return (n <= 1) ? 1 : my_function(n - 1) + ' ' + n;
  // Тут нужно написать решение
}

//В этом задании в нашу функцию testStr передаются две строки. Вам нужно вернуть из функции их суммарную длину.
function testStr(a, b) {
  return a.length + b.length;
}


// В этом задании в нашу функцию testStr первым параметром передается строка (переменная str), а вторым - число (переменная n) . Вам нужно вернуть из функции символ строки , порядковый номер которого указан в переданном в функцию числе.

// Подсказка: порядковый номер не равен индексу символа в строке. Если есть сомнения - перечитайте предыдущие шаги.

// Sample Input:

// Ithardlycousinmealways
// 19

// Sample Output:

// w


function testStr(str, n) {
  return(str[n-1]);
  }


//строка а к верхнему регистру, b к нижнему
  function testStr(a, b) {
    return(a.toUpperCase() + " " + b.toLowerCase());
    }
    
    

    // В этом задании в нашу функцию testStr передаются две строки. Вам нужно вернуть индекс позиции, с которой начинается вхождение второй строки в первую.

    // Sample Input 1:
    
    // This is a test string
    // test
    
    // Sample Output 1:
    
    // 10
    function testStr(a, b) {
      return(a.indexOf(b, 0));
  }


  // В этом задании в нашу функцию testArray передаются два массива случайной длины заполненные случайными числами. Вам нужно сосчитать сумму всех элементов обоих массивов и возвратить ее из функции.
  function testArray(a, b) {
    var sum=0;
    for(var i=0;i<a.length;i++){
    sum+=a[i]};
    for(var i=0;i<b.length;i++){
    sum+=b[i]};
    return sum
}

//В этом задании в нашу функцию testArray передаются две строки случайной длины и содержания. Вам нужно составить из символов этих строк один массив (каждый символ строки становится отдельным элементом массива), затем добавить первым элементом  массива текстовое значение "Иванов", и вернуть из функции все элементы в обратном порядке, преобразовав в строку. Обратите внимание, что в обратном порядке нужно переставить элементы внутри массива, а данные внутри элементов инвертировать не нужно!
function testArray(a, b) {
   return a.concat(b).split('').reverse().join('').concat('Иванов');
}


/*В этом задании в нашу функцию testDateTime передаются две строки вида "03 November 2017 04:17".
Вам нужно превратить строки в даты, сравнить их. Для той, что больше получить день недели и вернуть его из функции.

Название дня недели должно быть по-русски, с большой буквы, например: "Понедельник".

Sample Input 1:

19 October 1909 10:27
28 March 1909 00:59

Sample Output 1:

Вторник*/

function testDateTime(a, b) {  
let firstData = new Date(a);
let secondData = new Date(b);
let weekDays = ['Воскресенье','Понедельник','Вторник','Среда','Четверг','Пятница','Суббота'];
if(+firstData >= +secondData){
    return weekDays[firstData.getDay()];
} else if(+firstData < +secondData){
    return weekDays[secondData.getDay()];
}
}

function testDateTime(a, b) {
  let aDate = new Date(a)
  let bDate = new Date(b)
  
  function denNedeli(c) {

      switch(c.getDay()) {
          case 0:return 'Воскресенье';break;
          case 1:return 'Понедельник';break;
          case 2:return 'Вторник';break;
          case 3:return 'Среда';break;
          case 4:return 'Четверг';break;
          case 5:return 'Пятница';break;
          case 6:return 'Суббота';break;
      }
  }

  return (aDate > bDate) ? denNedeli(aDate) : denNedeli(bDate)
}

/*

В этом задании в нашу функцию передается угол в градусах. Вам нужно вернуть из функции значение его синуса. Не забывайте, что тригонометрические функции в JavaScript принимают аргументы только в радианах!

Sample Input:

348

Sample Output:

-0.20791169081775987

*/
function testMath(a) {
  return Math.sin (a * (Math.PI  / 180));
}

/*

А тут вам нужно вычислить и вернуть из функции площадь треугольника. Передаваемые в функцию аргументы "a" и "b" - это длины сторон, а "c" - это угол между ними в градусах.

Sample Input:

2 10 16

Sample Output:

2.7563735581699915

*/
function testMath(a, b, c) {
  let x = c * Math.PI / 180;
 return 1/2*a*b*Math.sin(x);
 
}

/*

В этом задании в нашу функцию передаются 4 числа. Вам необходимо вычислить результат деления большего из этих чисел на меньшее, и округлив до ближайшего меньшего целого вернуть из функции.

Sample Input:

1 4 8 8

Sample Output:

8

*/
function testMath(a, b, c, d) {
  x = Math.max(a, b, c, d);   
  y = Math.min(a, b, c, d); 
  z= x / y;
 return Math.floor(z);
}

/*Функции вычисления, (почему бы не назвать эту группу именно так):

Math.sqrt(x) - возвращает квадратный корень из аргумента
Math.pow(base, exponent) - возводит число "base" в степень "exponent"
Math.log(x) - вычисляет натуральный (по основанию е) логарифм числа
Math.exp(x) - вычисляет экспоненту - значение числа е в степени аргумента "х"
Math.random() - возвращает случайное число от 0 (включительно) до 1
*/

/*

В этом задании в нашу функцию передаются два параметра: целочисленная переменная ("а") и некоторая функция ("func"). Вам необходимо запустить функцию "func", с переменной "а" в качестве аргумента. Но вот проблема - в функции, похоже, оказалась ошибка. Вам нужно возвратить имя (свойство "name") возникающей ошибки.

Sample Input:

9

Sample Output:

EvalError

*/
function testErrorFunc(a, func) {         
try {
  func(a);
} catch (ex){
return (ex.name);}   
}

/*В этом задании в нашу функцию testRegExp первым параметром передается случайная строка(переменная s), а вторым - случайная подстрока(переменная sub_s), которую нужно использовать в качестве шаблона регулярного выражения. Вам нужно вернуть из функции строку, в которой будут перечислены через запятую все совпадения шаблона с первой строкой.

 

Sample Input 1:

Andsirdaarrevarariarewbutovearrmararan
ar

Sample Output 1:

ar,ar,ar,ar,ar,ar,ar*/
function testRegExp(s, sub_s) {
  var m = new RegExp(sub_s, 'g')
  x = s.match(m);
  return x.join();
  }
  








